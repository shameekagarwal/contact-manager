package com.boot.contactmanager.controllers;

import java.util.List;

import javax.mail.MessagingException;
import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import com.boot.contactmanager.daos.PasswordResetRepository;
import com.boot.contactmanager.daos.UserRepository;
import com.boot.contactmanager.entities.PasswordReset;
import com.boot.contactmanager.entities.User;
import com.boot.contactmanager.services.EmailService;
import com.boot.contactmanager.utils.Message;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

@Controller
@RequestMapping("auth")
public class AuthController {

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private PasswordResetRepository passwordResetRepository;

    @Autowired
    private BCryptPasswordEncoder passwordEncoder;

    @Autowired
    private EmailService emailService;

    private Long getRandomInteger() {
        long min = 1000000;
        long max = 9999999;
        long randomInteger = (long) Math.floor(Math.random() * (max - min + 1) + min);
        return randomInteger;
    }

    private String getPasswordResetContent(Long otp) {
        return "<p><b>your otp is " + otp + "</b></p>"
                + "<p>please enter this otp where prompted to reset the password.</p>"
                + "<p>the otp expires in an hour.</p><hr />"
                + "<small>you can safely ignore this message if the request wasn't generated by you.</small>";
    }

    @GetMapping("signin")
    public String signin(Model model) {
        model.addAttribute("title", "Signin");
        return "signin";
    }

    @GetMapping("signup")
    public String getSignup(Model model) {
        model.addAttribute("title", "Signup");
        User user = new User();
        model.addAttribute("user", user);
        return "signup";
    }

    @PostMapping("signup")
    public String postSignup(Model model, @Valid @ModelAttribute("user") User user, BindingResult result,
            HttpSession session) {

        // check if email is unique
        List<User> users = userRepository.getUsersByEmail(user.getEmail());
        if (users.size() != 0) {
            result.rejectValue("email", "error.user", "an account with the entered email already exists");
        }

        // return if errors
        if (result.hasErrors()) {
            model.addAttribute("title", "Signup");
            return "signup";
        }

        // encode password
        user.setPassword(passwordEncoder.encode(user.getPassword()));

        // set intial value - (user not banned)
        user.setRole("ROLE_USER");
        user.setEnabled(true);

        // save user
        userRepository.save(user);

        // return success
        Message message = new Message("you have been signed up successfully, now try signing in", "success");
        session.setAttribute("message", message);
        return "redirect:/auth/signin/";
    }

    @GetMapping("forgot-password")
    public String getForgotPassword(Model model) {
        model.addAttribute("title", "Forgot Password");
        return "forgot-password";
    }

    @PostMapping("forgot-password")
    public String postForgotPassword(Model model, HttpSession session, @RequestParam("email") String email) {
        List<User> users = userRepository.getUsersByEmail(email);

        // no user found corresponding to the email, return with error
        if (users.size() == 0) {
            Message message = new Message("there is no record for the entered email in the database", "error");
            session.setAttribute("message", message);
            return "redirect:/auth/signin";
        }

        // generate random otp
        Long otp = getRandomInteger();

        // try sending mail
        try {
            emailService.sendEmail(email, "Password Reset for ContactManager", getPasswordResetContent(otp));
        } catch (MessagingException e) {
            Message message = new Message("sending otp to your email failed, please try again", "error");
            session.setAttribute("message", message);
            return "redirect:/auth/signin";
        }

        // remove old, unprocessed password reset request by same email
        List<PasswordReset> passwordResets = passwordResetRepository.getEntriesByEmail(email);
        if (passwordResets.size() == 1) {
            passwordResetRepository.delete(passwordResets.get(0));
        }

        // save password-reset request
        PasswordReset passwordReset = new PasswordReset();
        passwordReset.setEmail(email);
        passwordReset.setOtp(otp);
        passwordReset.setResetRequestTime(System.currentTimeMillis());
        // have to set a dummy value before saving for transient fields
        passwordReset.setPassword("reset password");
        passwordResetRepository.save(passwordReset);

        // return success
        model.addAttribute("title", "Forgot Password");
        PasswordReset passwordResetForForm = new PasswordReset();
        passwordResetForForm.setEmail(email);
        model.addAttribute("passwordReset", passwordResetForForm);
        Message message = new Message("an otp has been sent your email, enter it here to reset your password",
                "success");
        session.setAttribute("message", message);
        return "reset-password";
    }

    @PostMapping("reset-password")
    public String postResetPassword(Model model, HttpSession session,
            @Valid @ModelAttribute("passwordReset") PasswordReset passwordReset, BindingResult result) {

        // retrieve password request corresponding to the email
        List<PasswordReset> passwordResets = passwordResetRepository.getEntriesByEmail(passwordReset.getEmail());
        PasswordReset passwordResetOriginal = passwordResets.get(0);

        Integer hourInMillis = 1000 * 60 * 60;

        // check if otps match
        if (!passwordReset.getOtp().toString().equals(passwordResetOriginal.getOtp().toString())) {
            result.rejectValue("otp", "error.passwordReset", "otp entered is incorrect");
        }

        // check if otp not expired
        if (System.currentTimeMillis() - passwordResetOriginal.getResetRequestTime() > hourInMillis) {
            result.rejectValue("otp", "error.passwordReset", "otp has expired");
        }

        // return if errors
        if (result.hasErrors()) {
            model.addAttribute("title", "Forgot Password");
            return "reset-password";
        }

        // reset password, encode it and resave
        List<User> users = userRepository.getUsersByEmail(passwordReset.getEmail());
        User user = users.get(0);
        user.setPassword(passwordEncoder.encode(passwordReset.getPassword()));
        userRepository.save(user);

        // remove password reset request from database
        passwordResetRepository.delete(passwordReset);

        // return success
        Message message = new Message("your password has been reset successfully", "success");
        session.setAttribute("message", message);
        return "redirect:/auth/signin";
    }
}
